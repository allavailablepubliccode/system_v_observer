% =========================================================================
% Figure 3 Generator: Constructing Structured Input Driver Signal
% Author: Erik D. Fagerholm
% Associated with manuscript: "Noise as a diagnostic tool: Distinguishing
% System / Device Effects in Multimodal Neuroimaging"
%
% This script creates the structured exogenous input (driver signal) used
% in synthetic data generation. It reflects both:
%   - slow fluctuations: piecewise-constant values per scene
%   - fast fluctuations: added Gaussian noise
%
% Output is a 1000-sample driver shown as two subplots:
%   (Top) Scene-wise base signal (slow)
%   (Bottom) Final driver with added noise and smoothing
%
% NOTE: You must update `scene_file` to your own path.
% =========================================================================

clear; clc; close all; rng(0);  % Reset workspace and seed RNG

% -------------------------
% Settings
% -------------------------
N       = 1000;     % Number of timepoints
targ_fs = 250;      % Sampling rate in Hz

% -------------------------
% Load scene transition info
% -------------------------
% This file should contain scene cut timestamps in seconds
scene_file = '~/UserPath/scenecut_info.csv';
scene_cuts = readmatrix(scene_file);

% Convert scene cut times to sample indices
scene_samples = round(scene_cuts * targ_fs);
scene_samples = scene_samples(scene_samples > 1 & scene_samples < N);  % Clip to valid range

% Define boundaries between scenes
scene_boundaries = unique([1, scene_samples(:)', N + 1]);
n_scenes = length(scene_boundaries) - 1;

% -------------------------
% Create base driver (slow fluctuations)
% -------------------------
rng(0);  % Ensure same random values every run
base = zeros(1, N);
scene_values = rand(1, n_scenes) * 2 - 1;  % Random value in [-1, 1] per scene

for s = 1:n_scenes
    idx_start = scene_boundaries(s);
    idx_end   = scene_boundaries(s + 1) - 1;
    base(idx_start:idx_end) = scene_values(s);
end

% -------------------------
% Add structured noise (fast fluctuations)
% -------------------------
noise  = 0.5 * randn(1, N);  % Additive Gaussian noise
driver = base + noise;

% Optional: smooth to reflect realistic neural inputs
driver = smoothdata(driver, 'gaussian', 5);

% -------------------------
% Plot results
% -------------------------
figure
set(gcf, 'position', [1 73 1014 464])  % Set figure size

subplot(2,1,1)
plot(base, 'k')
title('Scene-Based Base Signal')
xlabel('Time (samples)')
ylabel('Amplitude')
xlim([0 N])

subplot(2,1,2)
plot(driver, 'k')
title('Final Driver Signal with Fast Fluctuations')
xlabel('Time (samples)')
ylabel('Amplitude')
xlim([0 N])
