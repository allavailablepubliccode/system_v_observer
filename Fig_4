% =========================================================================
% Figure 4 Generator: Synthetic Signals and Model Comparison
% Author: Erik D. Fagerholm
% Associated with: "Noise as a diagnostic tool: Distinguishing System / 
% Device Effects in Multimodal Neuroimaging"
%
% This script generates synthetic datasets using Dynamic Expectation Maximization
% (DEM) under two generative scenarios:
%   (A) Differences arise from system dynamics (identical observers)
%   (B) Differences arise from observer mappings (identical systems)
% It then inverts both models using SPMâ€™s DEM tools and compares evidence
% for the competing reduced models.
%
% Output:
%   - Panel A: synthetic signals under identical observers
%   - Panel B: synthetic signals under identical systems
%   - Panel C/D: model evidence (variational free energy) comparisons
%   - Insets: corresponding softmax probabilities
%
% NOTE: Requires SPM12 (https://www.fil.ion.ucl.ac.uk/spm/)
% =========================================================================

clear; clc; close all; warning('off','all'); rng(0);

% -------------------------------------------------------------------------
% Generate driver (scene-based + noise input)
% -------------------------------------------------------------------------
N    = 1000;       % number of timepoints
U    = create_driver(N);  % see function below
pvr  = 1;          % prior variance for model reduction

% -------------------------------------------------------------------------
% Define model structure and parameters
% -------------------------------------------------------------------------
E.n    = 4;     % embedding dimension
E.d    = 1;     % data embedding
E.nN   = 8;     % number of DEM iterations
E.s    = 1/8;   % smoothness of fluctuations
E.dt   = 1/16;  % integration timestep
M(1).E = E;

x.x    = 0;     % initial state of system x
x.xt   = 0;     % initial state of system x tilde (x~)
M(1).x = x;

% State dynamics: x and x~ differ by da (system-level difference)
M(1).f = @(x,v,P) [P.a * x.x          + P.b * v;
                   (P.a + P.da) * x.xt + P.b * v];

% Observer functions: g and g~ differ by dk (observer-level difference)
M(1).g = @(x,v,P) [P.c * tanh(P.k * x.x);
                   P.c * tanh((P.k + P.dk) * x.xt)];

% Core generative model parameters
P.a = -7/2;   % decay (Jacobian)
P.b = 1/64;   % input gain
P.c = 11/4;   % observer nonlinearity
P.k = 9/8;    % observer input gain

% Hyperparameters
M(1).V = exp(149/16);  % observation noise precision
M(1).W = exp(149/16);  % state noise precision
M(2).v = exp(6);       % initial state precision
M(2).V = exp(149/16);  % input precision

% -------------------------------------------------------------------------
% Case A: Identical Observers (only system-level difference)
% -------------------------------------------------------------------------
P.da    = 2.5;   % different system
P.dk    = 0;     % same observer
M(1).pE = P;

IO = spm_DEM_generate(M, U, P);  % generate synthetic data

subplot(2,2,1)
plot(IO.Y')
title('A: Identical Observers (System Difference)')
drawnow

% -------------------------------------------------------------------------
% Case B: Identical Systems (only observer-level difference)
% -------------------------------------------------------------------------
P.da    = 0;       % same system
P.dk    = -1.2;    % different observer
M(1).pE = P;

IS = spm_DEM_generate(M, U, P);  % generate synthetic data

subplot(2,2,2)
plot(IS.Y')
title('B: Identical Systems (Observer Difference)')
drawnow

% -------------------------------------------------------------------------
% Model Inversion (Full Model with free da and dk)
% -------------------------------------------------------------------------
pE      = P; pE.da = 0; pE.dk = 0;  % null starting point
M(1).pE = pE;

pC      = spm_zeros(pE);     % zero priors
pC.da   = 1; pC.dk = 1;      % allow learning both
M(1).pC = diag(spm_vec(pC)) * pvr;

IO.M    = M; IO.U = U;  % assign model to synthetic dataset
IS.M    = M; IS.U = U;

% Define reduced models for model comparison
PC{1} = pC; PC{1}.dk = 0;  % Identical Observers (IO hypothesis)
PC{2} = pC; PC{2}.da = 0;  % Identical Systems (IS hypothesis)

% ------------------------
% Invert and Compare Models
% ------------------------

LAP_IO = spm_LAP(IO);
F_IO   = RedMod(LAP_IO, PC);  % model evidence
subplot(2,2,3)
bar(F_IO)
title('C: VFE - Identical Observers Dataset')
drawnow

LAP_IS = spm_LAP(IS);
F_IS   = RedMod(LAP_IS, PC);  % model evidence
subplot(2,2,4)
bar(F_IS)
title('D: VFE - Identical Systems Dataset')
drawnow

% ------------------------
% Softmax Insets (Probabilities)
% ------------------------
figure
subplot(2,2,1)
bar(spm_softmax(F_IO(:)))
title('C inset: Probabilities')
p_IO = spm_softmax(F_IO(:))

subplot(2,2,2)
bar(spm_softmax(F_IS(:)))
title('D inset: Probabilities')
p_IS = spm_softmax(F_IS(:))

% =========================================================================
% Helper Functions
% =========================================================================

function F = RedMod(LAP, PC)
    % Perform model reduction and return log model evidence (VFE)
    qE = LAP.qP.P{1};
    qC = LAP.qP.C;
    pE = LAP.M(1).pE;
    pC = LAP.M(1).pC;
    for m = 1:numel(PC)
        rC = diag(spm_vec(PC{m}));
        F(m,1) = spm_log_evidence(qE,qC,pE,pC,pE,rC);
    end
    F = F - min(F);  % normalize
end

function U = create_driver(N)
    % Simple random input with fast and slow fluctuations
    n_scenes = 8;
    cut_points = round(linspace(1, N, n_scenes+1));
    base = zeros(1,N);
    values = rand(1, n_scenes)*2 - 1;
    for i = 1:n_scenes
        base(cut_points(i):cut_points(i+1)-1) = values(i);
    end
    noise = 0.5 * randn(1,N);
    U = smoothdata(base + noise, 'gaussian', 5);
end
