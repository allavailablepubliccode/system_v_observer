%% Generate Data for Figure 7
% -------------------------------------------------------------------------
% This script performs model inversion using spm_LAP across a sweep of
% precision settings for each subject, saving results as .mat files.
%
% These results are used to evaluate how model fit varies with noise level
% -------------------------------------------------------------------------

clear; clc; close all; rng(0);

%% === USER INPUT REQUIRED ===
% Adjust these to point to your local system
base = '~/Dropbox/Work/System_Observer/data/lfp_ieeg/mat/';
outd = '~/Dropbox/Work/System_Observer/data/lfp_ieeg/lap/';
load('~/Dropbox/Work/System_Observer/data/lfp_ieeg/right_hippocampus_indices.mat')

%% Configuration
nrange  = 2.7:0.01:4;     % Log-precisions to test
subs    = 13:16;          % Subset of subjects to invert
orig_fs = 1000; targ_fs = 250; ds = orig_fs / targ_fs;
tmin    = 1; tmax = 1000; pvr = 1;

% Model structure
E.n = 4; E.d = 1; E.nN = 8; E.s = 1/8; E.dt = 1/16;
M(1).E = E;
M(1).x.x = 0; M(1).x.xt = 0;

% State dynamics (x and x~) differ by P.da
M(1).f = @(x,v,P) [P.a * x.x + P.b * v(1) + P.s1 * v(2);
                  (P.a + P.da) * x.xt + P.b * v(1) + P.s2 * v(2)];

% Observation function (differ by P.dk)
M(1).g = @(x,v,P) [P.c * tanh(P.k * x.x);
                   P.c * tanh((P.k + P.dk) * x.xt)];

% Generative parameters
pE = struct('a', -7/2, 'b', 1/64, 'c', 11/4, 'k', 9/8, ...
            'da', 0, 'dk', 0, 's1', 0, 's2', 0);
M(1).pE = pE;

% Priors
pC = spm_zeros(pE); fields = fieldnames(pC);
for i = 1:numel(fields), pC.(fields{i}) = 1; end
M(1).pC = diag(spm_vec(pC)) * pvr;
M(2).v  = [exp(6) exp(6)];

% Create structured + stochastic input
U = create_driver(tmax); 
U(2,:) = randn(1, tmax);  % stochastic component
DEM.U  = U;

%% Invert for each subject and each noise level
for ii = 1:numel(subs)
    subject = subs(ii);
    fprintf('Subject %d\n', subject);

    % Load empirical data
    load([base 'subject_' num2str(subject) '.mat']);
    mic = mean(LFP_micro(:, double(indices{subject}.micro))', 1);
    mac = mean(LFP_macro(:, double(indices{subject}.macro))', 1);
    mic = downsample(mic, ds); mac = downsample(mac, ds);
    N   = min(length(mic), length(mac));
    mic = mic(1:N); mac = mac(1:N);
    Y   = [mic(tmin:tmax); mac(tmin:tmax)];
    DEM.Y = Y;

    for jj = 1:numel(nrange)
        noise = nrange(jj);
        out_file = [outd 'subject_' num2str(subject) '_noise_' num2str(noise) '.mat'];

        if exist(out_file, 'file'), continue; end

        % Set precision (log-space)
        M(1).V = exp(noise);
        M(1).W = exp(noise);
        M(2).V = exp(noise);
        DEM.M = M;

        LAP = spm_LAP(DEM); %#ok<NASGU>
        save(out_file, 'LAP');
    end
end
