% =========================================================================
% Figure 5 Generator: Synthetic Signals with Stochastic Inputs
% Author: Erik D. Fagerholm
% Associated with manuscript: "Noise as a diagnostic tool: Distinguishing
% System / Device Effects in Multimodal Neuroimaging"
%
% This script repeats the logic from Figure 4, but adds a second input 
% channel to introduce stochastic fluctuations (white noise).
% The generative model includes both structured (scene-based) and 
% random inputs, passed through systems and observer functions.
%
% Outputs:
%   - A/B: synthetic signals with system/observer differences + noise
%   - C/D: variational free energy (VFE) comparisons with 4 reduced models
%   - Insets: softmax probabilities showing model preference
%
% NOTE: Requires SPM12.
% =========================================================================

clear; clc; close all; warning('off','all'); rng(0);

% -------------------------------------------------------------------------
% Define inputs
% -------------------------------------------------------------------------
N       = 1000;         % number of timepoints
pvr     = 1;            % prior variance scaling

U       = create_driver(N);     % slow, structured input
U(2,:)  = randn(1,N);           % fast, stochastic noise input

% -------------------------------------------------------------------------
% Define model parameters and structure
% -------------------------------------------------------------------------
E.n     = 4;      % embedding dimension
E.d     = 1;      % data embedding
E.nN    = 8;      % DEM iterations
E.s     = 1/8;    % fluctuation smoothness
E.dt    = 1/16;   % integration step
M(1).E  = E;

x.x     = 0;      % initial condition: system 1
x.xt    = 0;      % initial condition: system 2
M(1).x  = x;

% State dynamics with structured + stochastic inputs (v1, v2)
M(1).f = @(x,v,P) [P.a * x.x +     P.b * v(1) + P.s1 * v(2);
                  (P.a + P.da) * x.xt + P.b * v(1) + P.s2 * v(2)];

% Observer functions (nonlinear), differing by dk
M(1).g = @(x,v,P) [P.c * tanh(P.k          * x.x);
                   P.c * tanh((P.k + P.dk) * x.xt)];

% Base generative model parameters
P.a  = -7/2;
P.b  =  1/64;
P.c  = 11/4;
P.k  = 9/8;
P.s1 = 1/64;    % stochastic gain (x)
P.s2 = 2/64;    % stochastic gain (x~)

% Precision settings
M(1).V = exp(149/16);        % observation precision
M(1).W = exp(149/16);        % state noise precision
M(2).v = [exp(6), exp(6)];   % initial state precision
M(2).V = exp(149/16);        % input precision

% -------------------------------------------------------------------------
% Case A: Identical observers (differences in system dynamics)
% -------------------------------------------------------------------------
P.da    = 2.5;  % different system dynamics
P.dk    = 0;    % same observer functions
M(1).pE = P;

IO = spm_DEM_generate(M, U, P);  % generate synthetic data

% -------------------------------------------------------------------------
% Case B: Identical systems (differences in observer mappings)
% -------------------------------------------------------------------------
P.da    = 0;        % same system
P.dk    = -1.2;     % different observer functions
M(1).pE = P;

IS = spm_DEM_generate(M, U, P);  % generate synthetic data

% -------------------------------------------------------------------------
% Plot synthetic signals
% -------------------------------------------------------------------------
figure
subplot(2,2,1)
plot(IO.Y')
title('A: Identical Observers + Noise')

subplot(2,2,2)
plot(IS.Y')
title('B: Identical Systems + Noise')

% -------------------------------------------------------------------------
% Full model for inversion
% -------------------------------------------------------------------------
pE        = P;
pE.da     = 0;
pE.dk     = 0;
pE.s1     = 0;
pE.s2     = 0;
M(1).pE   = pE;

pC        = spm_zeros(pE);  % initialize prior covariance
pC.da     = 1;
pC.dk     = 1;
pC.s1     = 1;
pC.s2     = 1;
M(1).pC   = diag(spm_vec(pC)) * pvr;

% Assign model and inputs to each synthetic dataset
IO.M = M; IO.U = U;
IS.M = M; IS.U = U;

% -------------------------------------------------------------------------
% Define reduced model hypotheses
% -------------------------------------------------------------------------
PC{1} = pC;          PC{1}.dk = 0;                  % Identical observers
PC{2} = pC;          PC{2}.da = 0;                  % Identical systems
PC{3} = pC;                                       % Full model (both free)
PC{4} = pC; PC{4}.da = 0; PC{4}.dk = 0;             % Null model

% -------------------------------------------------------------------------
% Model comparison via variational free energy
% -------------------------------------------------------------------------
LAP_IO = spm_LAP(IO);
F_IO   = RedMod(LAP_IO, PC);  % log model evidence
subplot(2,2,3)
bar(F_IO)
title('C: VFE - Identical Observers Data')

LAP_IS = spm_LAP(IS);
F_IS   = RedMod(LAP_IS, PC);  % log model evidence
subplot(2,2,4)
bar(F_IS)
title('D: VFE - Identical Systems Data')

% -------------------------------------------------------------------------
% Plot softmax probabilities
% -------------------------------------------------------------------------
figure
subplot(2,2,1)
bar(spm_softmax(F_IO(:)))
title('C inset: Posterior Probabilities')
p_IO = spm_softmax(F_IO(:))

subplot(2,2,2)
bar(spm_softmax(F_IS(:)))
title('D inset: Posterior Probabilities')
p_IS = spm_softmax(F_IS(:))

% =========================================================================
% Helper Functions
% =========================================================================

function F = RedMod(LAP, PC)
    % RedMod: Apply model reduction to compute log model evidence
    qE = LAP.qP.P{1};
    qC = LAP.qP.C;
    pE = LAP.M(1).pE;
    pC = LAP.M(1).pC;
    for m = 1:numel(PC)
        rC = diag(spm_vec(PC{m}));
        F(m,1) = spm_log_evidence(qE,qC,pE,pC,pE,rC);
    end
    F = F - min(F);  % normalize
end

function U = create_driver(N)
    % create_driver: Structured scene-based + smoothed noise signal
    n_scenes = 8;
    cut_points = round(linspace(1, N, n_scenes+1));
    base = zeros(1,N);
    values = rand(1, n_scenes)*2 - 1;
    for i = 1:n_scenes
        base(cut_points(i):cut_points(i+1)-1) = values(i);
    end
    noise = 0.5 * randn(1,N);
    U = smoothdata(base + noise, 'gaussian', 5);
end
